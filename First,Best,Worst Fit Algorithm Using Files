#include <stdio.h>

#include <limits.h>

#include<stdlib.h>

// 5 100 500 200 300 600 4 212 417 112 426

// author @lokeshbhargava_

void firstfit(int n, int arr[], int m, int mem_arr[])

{

    int marked[m];

    int markedto[n];

    for (int i = 0; i < m; i++)

        marked[i] = -1;

    for (int i = 0; i < n; i++)

        markedto[i] = -1;

    for (int i = 0; i < n; i++)

    {

        for (int j = 0; j < m; j++)

        {

            if (arr[i] <= mem_arr[j] && marked[j] == -1)

            {

                marked[j] = 1;

                markedto[i] = j + 1;

                break;

            }

        }

    }

    for (int i = 0; i < n; i++)

    {

        if (markedto[i] != -1)

        {

            printf("Process %d allocated to block %d\n", i + 1, markedto[i]);

        }

        else

        {

            printf("Process %d unallocated !\n", i + 1);

        }

    }

}

void bestfit(int n, int arr[], int m, int mem_arr[])

{

    int marked[m];

    int markedto[n];

    for (int i = 0; i < m; i++)

        marked[i] = -1;

    for (int i = 0; i < n; i++)

        markedto[i] = -1;

    for (int i = 0; i < n; i++)

    {

        int curr_loss = INT_MAX;

        int curr_index;

        for (int j = 0; j < m; j++)

        {

            if (arr[i] <= mem_arr[j] && marked[j] == -1)

            {

                if (mem_arr[j] - arr[i] < curr_loss)

                {

                    curr_loss = mem_arr[j] - arr[i];

                    curr_index = j;

                }

            }

            // finds best fit

        }

        // allocate current process to best fit index which is curr_index

        if (curr_loss != INT_MAX)

        {

            markedto[i] = curr_index + 1;

            marked[curr_index] = 1;

        }

    }

    for (int i = 0; i < n; i++)

    {

        if (markedto[i] != -1)

        {

            printf("Process %d allocated to block %d\n", i + 1, markedto[i]);

        }

        else

        {

            printf("Process %d unallocated !\n", i + 1);

        }

    }

}

void worstfit(int n, int arr[], int m, int mem_arr[])

{

    int marked[m];

    int markedto[n];

    for (int i = 0; i < m; i++)

        marked[i] = -1;

    for (int i = 0; i < n; i++)

        markedto[i] = -1;

    for (int i = 0; i < n; i++)

    {

        int curr_loss = INT_MIN;

        int curr_index;

        for (int j = 0; j < m; j++)

        {

            if (arr[i] <= mem_arr[j] && marked[j] == -1)

            {

                if (mem_arr[j] - arr[i] > curr_loss)

                {

                    curr_loss = mem_arr[j] - arr[i];

                    curr_index = j;

                }

            }

            // finds worst fit

        }

        // allocate current process to best fit index which is curr_index

        if (curr_loss != INT_MIN)

        {

            markedto[i] = curr_index + 1;

            marked[curr_index] = 1;

        }

    }

    for (int i = 0; i < n; i++)

    {

        if (markedto[i] != -1)

        {

            printf("Process %d allocated to block %d\n", i + 1, markedto[i]);

        }

        else

        {

            printf("Process %d unallocated !\n", i + 1);

        }

    }

}

int main()

{

    FILE* fp=fopen("a.txt","r");

    if(fp==NULL)

    printf("Error file contents are empty !");

    int m;

    fscanf(fp,"%d",&m);

    int mem_arr[m];

    for (int i = 0; i < m; i++)

    {

        //char ch=fgetc(fp);

        //if(ch!=EOF)

        fscanf(fp,"%d",&mem_arr[i]);

    }

   // ch=fgetc(fp);

   int n;

        fscanf(fp,"%d",&n);

    int arr[n];

    for (int i = 0; i < n; i++)

    {

        //char ch=fgetc(fp);

        //if(ch!=EOF)

            fscanf(fp,"%d",&arr[i]);

    }

    fclose(fp);

    printf("First fit : \n");

    firstfit(n, arr, m, mem_arr);

    printf("Best fit : \n");

    bestfit(n, arr, m, mem_arr);

    printf("Worst fit : \n");

    worstfit(n, arr, m, mem_arr);

}
